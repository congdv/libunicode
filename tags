!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ABUF_INIT	test_utf_8.c	34;"	d	file:
CC	Makefile	/^CC=cc$/;"	m
DBUG	Makefile	/^DBUG= -g$/;"	m
FLAGS	Makefile	/^FLAGS=-Wall -Wextra -pedantic $/;"	m
INIT	unicode.c	44;"	d	file:
STD	Makefile	/^STD=-std=c99$/;"	m
UNICODE_H	unicode.h	8;"	d
VOWEL_SOUND	test_utf_8.c	15;"	d	file:
ab	unicode.c	/^abuf ab = INIT;$/;"	v
abAppend	test_utf_8.c	/^void abAppend(struct abuf *ab,int c) {$/;"	f
abAppend	unicode.c	/^void abAppend(abuf *ab, char *s, int len) {$/;"	f
abAppendString	test_utf_8.c	/^void abAppendString(struct abuf *ab,const char *s, int len) {$/;"	f
abFree	unicode.c	/^void abFree(abuf *ab) {$/;"	f
abuf	test_utf_8.c	/^struct abuf {$/;"	s	file:
abuf	unicode.c	/^typedef struct abuf {$/;"	s	file:
abuf	unicode.c	/^} abuf;$/;"	t	typeref:struct:abuf	file:
achar	unicode.c	/^struct achar {$/;"	s	file:
achar	unicode.h	/^typedef struct achar achar;$/;"	t	typeref:struct:achar
alchars	unicode.c	/^struct alchars {$/;"	s	file:
alchars	unicode.h	/^typedef struct alchars *alchars; \/\/ Definition to itselft$/;"	t	typeref:struct:alchars
appendNewChar	unicode.c	/^void appendNewChar(struct alchars *alc,unsigned c){$/;"	f
appendNewString	unicode.c	/^void appendNewString(alchars alc,const char *s) {$/;"	f
bytes	unicode.c	/^    char *bytes;$/;"	m	struct:achar	file:
chars	test_utf_8.c	/^    char *chars;$/;"	m	struct:abuf	file:
chars	unicode.c	/^    achar **chars;$/;"	m	struct:alchars	file:
createNewChar	unicode.c	/^alchars createNewChar(unsigned c) {$/;"	f
decode	unicode.c	/^achar *decode( unsigned codePoint) {$/;"	f
die	test_utf_8.c	/^void die(const char *s) {$/;"	f
disableRawMode	test_utf_8.c	/^void disableRawMode() {$/;"	f
enableRawMode	test_utf_8.c	/^void enableRawMode() {$/;"	f
encode	unicode.c	/^void encode(struct alchars *alc,const char *s, int numByte) { $/;"	f
freeChars	unicode.c	/^void freeChars(alchars *alc) {$/;"	f
getStringLen	unicode.c	/^int getStringLen(const char *s) {$/;"	f
getStringPointer	unicode.c	/^const char *getStringPointer(alchars alc) {$/;"	f
isValidChangeChars	test_utf_8.c	/^int isValidChangeChars(struct abuf *ab, int c) {$/;"	f
len	test_utf_8.c	/^    int len;$/;"	m	struct:abuf	file:
len	unicode.c	/^    int len;$/;"	m	struct:abuf	file:
length	unicode.c	/^    int length;$/;"	m	struct:achar	file:
length	unicode.c	/^    int length;$/;"	m	struct:alchars	file:
main	test.c	/^int main() {$/;"	f
main	test_utf_8.c	/^int main() {$/;"	f
newChar	unicode.c	/^alchars newChar(void) {$/;"	f
orig_terminos	test_utf_8.c	/^struct termios orig_terminos;$/;"	v	typeref:struct:termios
removeLastChars	test_utf_8.c	/^void removeLastChars(struct abuf *ab,int len) {$/;"	f
replaceUnicodeChars	test_utf_8.c	/^void replaceUnicodeChars(struct abuf *ab, int c) {$/;"	f
s	unicode.c	/^    char *s;$/;"	m	struct:abuf	file:
write_utf8	test_utf_8.c	/^void write_utf8(struct abuf *ab, unsigned codePoint) {$/;"	f
